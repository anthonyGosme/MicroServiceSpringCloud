version: '2.1'

services:

  product:
    networks:
      - my-network
    build: microservices/product-service
    image: hands-on/product-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "30081:80"
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:80/actuator/health}"
      interval: 10s
      timeout: 10s
      retries: 10

  recommendation:
    networks:
      - my-network
    build: microservices/recommendation-service
    image: hands-on/recommendation-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/recommendation.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "30082:80"
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:80/actuator/health}"
      interval: 10s
      timeout: 10s
      retries: 10

  review:
    networks:
      - my-network
    build: microservices/review-service
    image: hands-on/review-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/review.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USR}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    ports:
      - "30083:80"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:80/actuator/health}"
      interval: 10s
      timeout: 10s
      retries: 10

  product-composite:
    networks:
      - my-network
    build: microservices/product-composite-service
    image: hands-on/product-composite-service
    mem_limit: 350m
    ports:
      - "30180:80"
      - "8001:8001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product-composite.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:80/actuator/health}"
      interval: 10s
      timeout: 10s
      retries: 10

  mongodb:
    networks:
      - my-network
    image: mongo:3.6.9
    mem_limit: 350m
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USR}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PWD}
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 10s
      retries: 10

  rabbitmq:
    networks:
      - my-network
    image: rabbitmq:3.7.8-management
    mem_limit: 350m
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USR}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PWD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 10

  gateway:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/gateway.yml
      - SERVER_SSL_KEY_STORE_PASSWORD=${GATEWAY_TLS_PWD}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    build: spring-cloud/gateway
    image: hands-on/gateway
    mem_limit: 350m
    ports:
      - "8444:8444"
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl https://localhost:8444/actuator/health -k}"
      interval: 10s
      timeout: 10s
      retries: 10

  auth-server:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/auth-server.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    build: spring-cloud/auth-server
    image: hands-on/auth-server
    mem_limit: 350m
    ports:
      - "30084:80"
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl http://localhost:80/actuator/health}"
      interval: 10s
      timeout: 10s
      retries: 10



  mysql:
    networks:
      - my-network
    image: mysql:5.7
    mem_limit: 350m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=${MYSQL_USR}
      - MYSQL_PASSWORD=${MYSQL_PWD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USR} --password=${MYSQL_PWD} --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 10s
      retries: 10


  zipkin:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem
      - RABBIT_ADDRESSES=rabbitmq
      - RABBIT_USER=${RABBITMQ_USR}
      - RABBIT_PASSWORD=${RABBITMQ_PWD}
    ports:
      - "9411:9411"
    depends_on:
      rabbitmq:
        condition: service_healthy
networks:
  my-network:
    name: my-network
